#include <iostream>
#include<climits>
#include<vector>
using namespace std;

//Top Down DP 
int min_jumps (vector<int> arr,int n,vector<int> dp, int i)
{
    if(i==n-1)
    {
        return 0; 
    }
    if(i>=n)
    {
        return INT_MAX; 
    }
    //rec case 
    if(dp[i]!=0)  // it means it is already computed 
    {
        return dp[i]; 
    }
     
    //assume 
    int steps = INT_MAX; 
    int max_jump = arr[i]; // maximum jump that i can take from the current cell is arr[i]
    
    for(int jump=1;jump<=max_jump;jump++)
    {
        int next_cell = i + jump; 
        int subprob = min_jumps(arr,n,dp,next_cell()); 
        if(subprob!=INT_MAX)
        {
            steps = min(steps,subprob + 1); 
        }
    }
    
    return dp[i] = steps; 
}

int main() {
    
	vector<int> arr{3,4,2,1,2,3,7,1,1,3);  // every integer in the array represents the maximum jump that we can takee at every step 
	int n= arr.size();
    
    //create a array for dp
	vector<int> dp(n,0);
	
	cout<<min_jumps(arr,n,dp,0)<<endl;
	
	return 0;
}